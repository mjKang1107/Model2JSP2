/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-04-02 06:28:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.JSP4;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class cookieTest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>WebContent/JSP4/cookieTest.jsp</h1>\r\n");
      out.write("\thttps://itsaessak.tistory.com/49\r\n");
      out.write("\t쿠키 (p279~) <br>\r\n");
      out.write("\t클라이언트 쪽에서 사용(관리)되는 데이터, 생존기간동안 계속해서 유지,<br>\r\n");
      out.write("\t하드디스크에 저장 => 보안위협<br>\r\n");
      out.write("\t\t<hr>\r\n");
      out.write("\t- 이름, 값, 유효기간, 도메인, 경로...생성됨<br>\r\n");
      out.write("\t- 쿠키의 이름은 알파벳 + 숫자, 쿠키값 - 일반적인 데이터(공백,괄호,세미콜론..추가 인코딩)<br>\r\n");
      out.write("\t\r\n");
      out.write("\t1) 쿠키를 생성 (객체)<br>\r\n");
      out.write("\t2) 쿠키안에 필요한 설정을 저장\r\n");
      out.write("\t\t(쿠키유효기간, 설명, 도메인,...)<br>\r\n");
      out.write("\t3) 웹 브라우저에 생성된 쿠키를 전달<br>\r\n");
      out.write("\t\r\n");
      out.write("\t클라이언트가 사용할때 처리되는 동작<br>\r\n");
      out.write("\t1) 웹 페이지 요청정보에서 쿠키값을 가져옴<br>\r\n");
      out.write("\t2) 쿠키 생성 => (이름,값) 쌍으로 생성된 배열의 형태로 리턴<br>\r\n");
      out.write("\t3) 쿠키 설정값 지정<br>\r\n");
      out.write("\t4) 웹 페이지에 응답정보를 사용해서 쿠키를 전달<br>\r\n");
      out.write("\t5) 쿠키이름을 사용해서 쿠키의 값을 꺼내서 사용<br>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t");

		//크롬 쿠키가 저장되는 HDD 공간
		//C:/Users/ITWILL/AppData/Local
		//	/Google/Chrome/User Data/Default/Cache 
		//     /로 변경하는게 좋다
		
		
      out.write("\r\n");
      out.write("\t\t<hr>\r\n");
      out.write("\t\t");

		
		//쿠키값 사용하기(받아오기)
		Cookie[] cookies = request.getCookies();
		
		String name= "";
		String value= "";
		//쿠키 배열이 값이 있을때
		if(cookies != null){
			//배열의 처음부터 끝까지 돌면서 체크 
			for(int i=0; i<cookies.length; i++){
				//특정 쿠키정보를 가져오기 => 쿠키의 이름만 비교해서 값을 사용
				if(cookies[i].getName().equals("CookName")){
					name = cookies[i].getName();
					value = cookies[i].getValue();
					
				}
						
			}
			
		}
		
		
		
		
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\t<h2>쿠키이름 : ");
      out.print(name );
      out.write(" , 쿠키값 : ");
      out.print(value );
      out.write(" </h2>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<hr>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<h2> 클라이언트 </h2>\r\n");
      out.write("\t\t<input type=\"button\" value=\"쿠키값 생성(저장)\" \r\n");
      out.write("\t\t\tonclick=\"location.href='cookieSet.jsp'\"\r\n");
      out.write("\t\t> <br>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<input type=\"button\" value=\"쿠키값 삭제(제거)\" \r\n");
      out.write("\t\t\tonclick=\"location.href='cookieDel.jsp'\"\r\n");
      out.write("\t\t> <br>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
