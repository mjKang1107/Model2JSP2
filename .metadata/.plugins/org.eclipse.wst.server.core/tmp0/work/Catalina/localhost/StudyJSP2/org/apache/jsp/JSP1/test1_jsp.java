/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-03-24 01:42:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.JSP1;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

 
    // 선언문 : 멤버변수,멤버메서드 선언 => jsp 페이지 어디서든 사용가능한 변수,메서드
    String name = "홍길동"; 
    public void method(){
    	System.out.println("출력");
    }
    // method1(); 메서드 선언O, 메서드 호출x
  

     int age = 20;  // 멤버변수
 	
		/* class Test{
		int num; 전역변수 , 멤버변수 -> 인스턴스변수(객체변수) - 각각(힙에 저장)
		static int num2; 멤버변수 -> 스테틱변수(정적변수, 클래스변수) - 공유함(클래스에 저장)
		
		멤버변수(필드) = 인스턴스변수 + 스테틱변수
		
		public void method(){
			int num3; 지역변수(중괄호-블럭안에 들어가는걸 말함)
			
		}	
	}
	*/
     
  
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("  <h1>WebContent/JSP1/test1.jsp</h1>\r\n");
      out.write("  \r\n");
      out.write("  <h2> JSP 기본요소 </h2>\r\n");
      out.write("  <h3>1. 주석문</h3>\r\n");
      out.write("  <h3>2. JSP 지시어</h3>\r\n");
      out.write("  <h3>3. 스크립트 요소</h3>\r\n");
      out.write("  <h3>4. 액션태그</h3>\r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  <!-- HTML 주석  -->\r\n");
      out.write("  ");
      out.write("\r\n");
      out.write("  <script type=\"text/javascript\">\r\n");
      out.write("    // JS 주석\r\n");
      out.write("    /* JS 주석2 */  \r\n");
      out.write("  </script>\r\n");
      out.write("  ");

   // java 주석
   /* java 주석2 */
   /** java 주석3 */
  
      out.write("\r\n");
      out.write("  \r\n");
      out.write("  ");

    // JSP 지시어(Directive) p150~
    //< %@ page ~ % > < %@ include ~ % > < %@ taglib ~ % >   
    // => 해당 파일에서 JSP코드를 실행시 어떤 방식으로 실행할껀지 설명
    
    // MIME 타입
    //https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/MIME_types
    
    //3. 스크립트요소 (p160~)
    // => JSP 코드안에 java코드를 사용가능하는 요소
    // 3-1. 선언문(Declaration) : 멤버 변수, 멤버 메서드 선언
    // 3-2. 스크립틀릿(Seriptlet)
    // 3-3. 표현식 (Expression)
  
      out.write("\r\n");
      out.write("  \r\n");
      out.write("  <h3> JSP - 선언문</h3>\r\n");
      out.write("  ");
      out.write("\r\n");
      out.write("  ");
      out.write("\r\n");
      out.write("  \r\n");
      out.write("  <h3> jsp - 스크립틀릿 </h3>\r\n");
      out.write("  \r\n");
      out.write("  ");

     // java 코드를 작성 
     int num=30; // 지역변수
     method(); // 메서드 호출 가능
     
     /* public void method2(){
    	 메서드 선언 불가
     } */    
  
  
      out.write("\r\n");
      out.write("  \r\n");
      out.write("  <h3> jsp - 표현식 </h3>\r\n");
      out.write("  <!-- 내가 선언한 동작(메서드의 리턴,변수,리터럴값을 사용) \r\n");
      out.write("       java 코드를 html 화면에 출력\r\n");
      out.write("  -->\r\n");
      out.write("  ");
      out.print(1000 );
      out.write("\r\n");
      out.write("  ");
      out.print(num );
      out.write("\r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
