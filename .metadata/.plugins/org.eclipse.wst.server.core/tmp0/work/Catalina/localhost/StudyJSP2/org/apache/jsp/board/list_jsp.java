/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-04-23 05:35:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.itwillbs.board.BoardBean;
import java.util.ArrayList;
import com.itwillbs.board.BoardDAO;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.itwillbs.board.BoardDAO");
    _jspx_imports_classes.add("com.itwillbs.board.BoardBean");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("  <h1>WebContent/board/list.jsp</h1>\r\n");
      out.write("  ");

   // 디비에 저장된 글의 개수를 알기
   
   // BoardDAO 객체 생성
   BoardDAO bdao = new BoardDAO();
   // 디비에 글의 수를 계산하는 메서드 생성 -> 호출
   // getBoardCount();
   int cnt = bdao.getBoardCount();
   
   /////////////////////////////////////////////////
   //게시판 페이징 처리 : DB에서 원하는 만큼만 글 가져오기
   
   //한페이지당 보여줄 글의 개수
   int pageSize = 5;
   
   //현페이지가 몇페이지 인지 확인
   String pageNum = request.getParameter("pageNum");
   if(pageNum == null){
	   pageNum = "1";
   }
   
   //페이지별 시작행 계산하기
   //1p -> 1번, 2p -> 11번 , 3p -> 21번 ,....=> 일반화
   
   int currentPage = Integer.parseInt(pageNum);
   int startRow = (currentPage-1)*pageSize+1; // 그냥 외워라...
   
   //끝행 계산하기
   //1p ->10번, 2p -> 20, 3p -> 30 =>일반화
   int endRow = currentPage*pageSize;
  // http://localhost:8088/StudyJSP2/board/list.jsp?pageNum=3
   
   
   //  디비에 저장된 모든 글정보를 가져오기 
 
  // ArrayList boardListAll = bdao.getBoardList(); 
   
   //디비에 저장된 모든 글중에서 원하는 만큼만 가져오기(페이지 사이즈)
   ArrayList boardList = bdao.getBoardList(startRow,pageSize);
   
  
      out.write("\r\n");
      out.write("  <h2> ITWILL 게시판 글목록 [총 : ");
      out.print(cnt );
      out.write("개] </h2>\r\n");
      out.write("  \r\n");
      out.write("  \t<h3><a href=\"writeForm.jsp\">글쓰기</a></h3>\r\n");
      out.write("  \r\n");
      out.write("  <table border=\"1\">\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td>번호</td>\r\n");
      out.write("      <td>제목</td>\r\n");
      out.write("      <td>작성자</td>\r\n");
      out.write("      <td>작성일</td>\r\n");
      out.write("      <td>조회수</td>\r\n");
      out.write("      <td>IP</td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    \r\n");
      out.write("    ");

     
    for(int i=0; i<boardList.size(); i++){
    	  BoardBean bb = (BoardBean) boardList.get(i);
    
      out.write("\r\n");
      out.write("     <tr>\r\n");
      out.write("      <td>");
      out.print(bb.getNum() );
      out.write("</td>\r\n");
      out.write("      <td>\r\n");
      out.write("      <a href=\"content.jsp?num=");
      out.print(bb.getNum());
      out.write("&pageNum=");
      out.print(pageNum);
      out.write('"');
      out.write('>');
      out.print(bb.getSubject() );
      out.write("</a>\r\n");
      out.write("      </td>\r\n");
      out.write("      <td>");
      out.print(bb.getName() );
      out.write("</td>\r\n");
      out.write("      <td>");
      out.print(bb.getDate() );
      out.write("</td>\r\n");
      out.write("      <td>");
      out.print(bb.getReadcount() );
      out.write("</td>\r\n");
      out.write("      <td>");
      out.print(bb.getIp() );
      out.write("</td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    ");

    }
    
      out.write("\r\n");
      out.write("    \r\n");
      out.write("  </table>\r\n");
      out.write("  \r\n");
      out.write("  <hr>\r\n");
      out.write("  ");

  //페이징 처리- 하단부 페이지 링크
  
  if(cnt != 0){//글이 있을때 표시
	  
		//전체 페이지수 계산
		//ex) 총 50개 -> 한페이지당 10개 출력, 5개
		//    총 57개 -> 		"		  , 6개
		int pageCount = cnt/pageSize+(cnt % pageSize == 0? 0:1);
	 
		//한 화면에 보여줄 페이지 번호의 개수 (페이지 블럭)
	  	int pageBlock = 2;
		
		// 페이지 블럭의 시작페이지 번호
		// ex) 1~10페이지 : 1, 11~20페이지 : 11 , 21~30페이지 : 21
		int startPage = ((currentPage-1)/pageBlock)* pageBlock + 1; //외워라.. 
		
		// 페이지 블럭의 끝 페이지 번호
		int endPage = startPage + pageBlock -1;
		
		if(endPage > pageCount){
			endPage = pageCount;
		}
		
		//이전버튼(해당 페이지블럭의 첫번째 페이지 호출)
		if(startPage > pageBlock){
			
      out.write("\r\n");
      out.write("\t\t\t<a href=\"list.jsp?pageNum=");
      out.print(startPage-pageBlock);
      out.write("\">[이전]</a>\r\n");
      out.write("\t\t\t");

		}
		
	
		//숫자1...5버튼
		for(int i=startPage; i<=endPage; i++){
			
      out.write("\r\n");
      out.write("\t\t\t<a href=\"list.jsp?pageNum=");
      out.print(i );
      out.write('"');
      out.write('>');
      out.write('[');
      out.print(i );
      out.write("]</a>\r\n");
      out.write("\t\t\t");
 
		}
				
		//다음버튼(기존의 페이지 블럭보다 페이지의 수가 많을때)
		if(endPage < pageCount){
			
      out.write("\r\n");
      out.write("\t\t\t<a href=\"list.jsp?pageNum=");
      out.print(startPage+pageBlock);
      out.write("\">[다음]</a>\r\n");
      out.write("\t\t\t");

		}
		
  }
  
 
  
      out.write("\r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
