/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-03-24 03:58:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.JSP1;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;

public final class test3_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Date");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h1>WebContent/JSP1/test3.html</h1>\r\n");


	new Date();
	//p177~
	//내장객체: JSP 자체적으로 내장되어있는 객체
	// => 별도의 객체 생성없이 사용가능(import문 사용없이도 사용가능)
	// => 내장객체는 JSP 페이지가 서블릿클래스로 변환될때_jspService()메서드 안에서 가장 먼저 선언 됨

	/*
	[javax.servlet 패키지] - 8개
	request : 클라이언트 요청정보를 저장하는 객체(HTTP요청,파라미터)
	response : 요청정보에 대한 응답정보를 처리하는 객체
	session : 클라이언트의 세션정보를 저장하는 객체
	pageContext : 페이지에 실행을 할때 필요한 정보를 저장하는 객체(프로젝트)
	out : 응답 페이지 전송을 위한 출력 스트림 객체
	applocation : 해당 애플리케이션의 컨텍스트 정보를 저장한 객체
	config : 해당 페이지의 서블릿 설정 저장 객체
	page : 해당 페이지 서블릿 객체 (인스턴스) ex)test1.java..
	
	[java.lang 패키지] - 1개
	exeception : 예외 처리 객체
	
	*/


      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<h3> request 내장객체 </h3>\r\n");
      out.write("\t<!-- 요청하는 거의 모든 정보를 가지고 있는 객체 -->\r\n");
      out.write("\r\n");
      out.write("서버 도메인명 : ");
      out.print(request.getServerName() );
      out.write(" <br>\r\n");
      out.write("서버 포트번호 : ");
      out.print(request.getServerPort() );
      out.write(" <br>\r\n");
      out.write("URL : ");
      out.print(request.getRequestURL() );
      out.write(" <br>\r\n");
      out.write("URI : ");
      out.print(request.getRequestURI() );
      out.write(" <br>\r\n");
      out.write("\r\n");
      out.write("클라이언트 호스트명 : ");
      out.print(request.getRemoteHost() );
      out.write(" <br> \r\n");
      out.write("클라이언트 IP : ");
      out.print(request.getRemoteAddr() );
      out.write(" <br>\r\n");
      out.write("\r\n");
      out.write("프로토콜 : ");
      out.print(request.getProtocol() );
      out.write(" <br>\r\n");
      out.write("\r\n");
      out.write("페이지 요청(전송)방식 : ");
      out.print(request.getMethod() );
      out.write(" <br>\r\n");
      out.write("프로젝트 경로(컨텍스트 경로) : ");
      out.print(request.getContextPath() );
      out.write(" <br>\r\n");
      out.write("물리적 경로 : ");
      out.print(request.getRealPath("/") );
      out.write(" <br>\r\n");
      out.write("\r\n");
      out.write("<hr>\r\n");
      out.write("http 해더(user-agent) : ");
      out.print(request.getHeader("user-agent") );
      out.write(" <br>\r\n");
      out.write("http 해더(accept-language) : ");
      out.print(request.getHeader("accept-language") );
      out.write(" <br>\r\n");
      out.write("http 해더(host) : ");
      out.print(request.getHeader("host") );
      out.write(" <br>\r\n");
      out.write("http 해더(connection) : ");
      out.print(request.getHeader("connection") );
      out.write(" <br>\r\n");
      out.write("\r\n");
      out.write("<h3> response 내장객체 </h3>\r\n");

	//response.setHeader("해더이름",값);
	//response.addCookie("쿠키값");
	//response.sendRedirect("URL주소");
	//response.setContentType("MIME 타입");

      out.write("\r\n");
      out.write("<h3> session 내장객체 </h3>\r\n");
      out.write("세션 ID값 : ");
      out.print(session.getId() );
      out.write(" <br>\r\n");
      out.write("세션생성시간 : ");
      out.print(session.getCreationTime() );
      out.write(" <br>\r\n");
      out.write("세션최종접속시간 : ");
      out.print(session.getLastAccessedTime() );
      out.write(" <br>\r\n");
      out.write("세션유지시간(1800초,30분) : ");
      out.print(session.getMaxInactiveInterval() );
      out.write(" <br>\r\n");
      out.write("\r\n");

// 세션유지시간 변경 30분 -> 60분
session.setMaxInactiveInterval(3600);

      out.write("\r\n");
      out.write("세션유지시간(1800초,30분) : ");
      out.print(session.getMaxInactiveInterval() );
      out.write(" <br>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
