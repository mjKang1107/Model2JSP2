/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-04-01 00:58:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.JSP2;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class scopePro_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("  <h1>WebContent/JSP2/scopePro.jsp</h1>\r\n");
      out.write("  \r\n");
      out.write("  <h2> 전달된 파라미터값을 저장후 출력 </h2>\r\n");
      out.write("  ");

    String id = request.getParameter("id");
  
  
      out.write("  \r\n");
      out.write("    아이디 : ");
      out.print(id );
      out.write(" <br>\r\n");
      out.write("    \r\n");
      out.write("  <h2> 영역객체의 값을 출력 </h2>\r\n");
      out.write("  ");

    // 해당 영역에 데이터를 저장 -> 해당 영역에서 데이터를 공유해서 사용가능
    // 영역데이터 저장
    // 영역객체.setAttribute("이름",값);
    
    // 영역데이터 사용
    // 영역객체.getAttribute("이름");
    //////////////////////////////////////////////////////////
    
    pageContext.setAttribute("page", "page영역 객체 정보!");
    //pageContext.setAttribute("page1", "page영역 객체 정보1!");
    request.setAttribute("req", "request 객체정보(itwill)");
    session.setAttribute("ses", "session 객체정보(itwill)");
    application.setAttribute("app", "application 객체 정보(itwill)");
    
  
      out.write("\r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  pageContext 내장객체 공유데이터(속성) : ");
      out.print(pageContext.getAttribute("page") );
      out.write("<br>\r\n");
      out.write("  request 내장객체 공유데이터(속성) : ");
      out.print(request.getAttribute("req") );
      out.write("<br>\r\n");
      out.write("  session 내장객체 공유데이터(속성) : ");
      out.print(session.getAttribute("ses") );
      out.write("<br>\r\n");
      out.write("  application 내장객체 공유데이터(속성) :");
      out.print(application.getAttribute("app") );
      out.write(" <br>\r\n");
      out.write("  \r\n");
      out.write("  <hr><hr>\r\n");
      out.write("  \r\n");
      out.write("  <h2> 페이지 이동 시 사용가능한 데이터 </h2>\r\n");
      out.write("  \r\n");
      out.write("   1. a 태그 사용 <br>\r\n");
      out.write("    파라미터값 전달 가능  +\r\n");
      out.write("     영역객체 : session,application 정보만 사용가능 <br>\r\n");
      out.write("   <a href=\"ScopePro2.jsp?id=");
      out.print(id);
      out.write("&pw=1234\">ScopePro2.jsp 페이지 이동</a>\r\n");
      out.write("  \r\n");
      out.write("  <hr>\r\n");
      out.write("  \r\n");
      out.write("  2. javascript 사용 <br>\r\n");
      out.write("      파라미터값 전달 가능  +\r\n");
      out.write("     영역객체 : session,application 정보만 사용가능 <br>\r\n");
      out.write("  <script type=\"text/javascript\">\r\n");
      out.write("      //alert('ScopePro2.jsp 페이지로 이동');\r\n");
      out.write("      //location.href=\"ScopePro2.jsp?id=");
      out.print(id);
      out.write("&pw=1234\";  \r\n");
      out.write("  </script>\r\n");
      out.write("  \r\n");
      out.write("  3. JSP 사용 <br>\r\n");
      out.write("  \r\n");
      out.write("  ");

  		System.out.println("scopePro.jsp 페이지 실행! ");
  		//response.sendRedirect("ScopePro2.jsp?id="+id+"&pw=1234");
  		// "ScopePro2.jsp?id=" + "아이디"
  
  
      out.write("\r\n");
      out.write("  \r\n");
      out.write("  4. JSP 액션태그 (forward방식 이동) <br>\r\n");
      out.write("  포워딩 방식 이동 : 페이지 이동 시 request, response 내장객체를 포함해서 이동하는 방식 <br>\r\n");
      out.write("  \t\t\tA -> B\r\n");
      out.write("  페이지 주소 : A 그대로 <br>\r\n");
      out.write("  페이지 화면 : B 바뀜 <br>\r\n");
      out.write("  => 페이지 주소 변경X , 페이지 화면 변경O , request, response 가지고 이동<br>\r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("    파라미터 전달 가능 +\r\n");
      out.write("   영역객체 : request, session, application 정보만 사용가능\r\n");
      out.write("  \r\n");
      out.write("  ");
      out.write("\r\n");
      out.write("  \t");
      if (true) {
        _jspx_page_context.forward("ScopePro2.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("pw", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("1234567", request.getCharacterEncoding()));
        return;
      }
      out.write("\r\n");
      out.write("     \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
