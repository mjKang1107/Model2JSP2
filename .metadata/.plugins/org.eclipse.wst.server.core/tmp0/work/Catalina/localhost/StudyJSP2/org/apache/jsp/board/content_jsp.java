/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-04-27 08:39:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.itwillbs.board.BoardBean;
import com.itwillbs.board.BoardDAO;

public final class content_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.itwillbs.board.BoardDAO");
    _jspx_imports_classes.add("com.itwillbs.board.BoardBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>WebContent/board/content.jsp</h1>\r\n");
      out.write("\t");

		// 페이지 이동시 전달정보가 있으면(파라미터) 항상 가장먼저 저장
		// num,pageNum
// 		int num = 0;
// 		try{
// 			num = Integer.parseInt(request.getParameter("num"));
// 		}catch(Exception e){
// 			System.out.println("존재하지 않는 글번호를 정수로 변환할수 없다.");
// 			num=1;
// 		}
		
		int num = Integer.parseInt(request.getParameter("num"));
		String pageNum = request.getParameter("pageNum");
		
	    // BoardDAO 객체 생성
	    BoardDAO bdao = new BoardDAO();
	    
		// 글 조회수를 1증가  (DB 처리)
		bdao.updateReadcount(num); 
		
		// DB에서 글번호(num)에 해당하 글정보를 모두 가져와서 출력	
		BoardBean bb = bdao.getBoard(num); 
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <table border=\"1\">\r\n");
      out.write("      <tr>\r\n");
      out.write("        <td>글번호</td>\r\n");
      out.write("        <td>");
      out.print(bb.getNum() );
      out.write("</td>\r\n");
      out.write("        <td>조회수</td>\r\n");
      out.write("        <td>");
      out.print(bb.getReadcount() );
      out.write("</td>\r\n");
      out.write("      </tr>\r\n");
      out.write("      <tr>\r\n");
      out.write("        <td>글쓴이</td>\r\n");
      out.write("        <td>");
      out.print(bb.getName() );
      out.write("</td>\r\n");
      out.write("        <td>작성일</td>\r\n");
      out.write("        <td>");
      out.print(bb.getDate() );
      out.write("</td>\r\n");
      out.write("      </tr>\r\n");
      out.write("      <tr>\r\n");
      out.write("        <td>글 제목</td>\r\n");
      out.write("        <td colspan=\"3\">");
      out.print(bb.getSubject() );
      out.write("</td>\r\n");
      out.write("      </tr>\r\n");
      out.write("      <tr>\r\n");
      out.write("        <td>첨부파일</td>\r\n");
      out.write("        <td colspan=\"3\"></td>\r\n");
      out.write("      </tr>\r\n");
      out.write("      <tr>\r\n");
      out.write("        <td>글내용</td>\r\n");
      out.write("        <td colspan=\"3\">");
      out.print(bb.getContent() );
      out.write("</td>\r\n");
      out.write("      </tr>\r\n");
      out.write("      \r\n");
      out.write("      <tr>\r\n");
      out.write("        <td colspan=\"4\">\r\n");
      out.write("          <input type=\"button\" value=\"수정하기\" \r\n");
      out.write("                 onclick=\"location.href='updateForm.jsp?num=");
      out.print(bb.getNum() );
      out.write("&pageNum=");
      out.print(pageNum );
      out.write("';\"\r\n");
      out.write("          >\r\n");
      out.write("          <input type=\"button\" value=\"삭제하기\" \r\n");
      out.write("                onclick=\" location.href='deleteForm.jsp?num=");
      out.print(bb.getNum() );
      out.write("&pageNum=");
      out.print(pageNum );
      out.write("';\"\r\n");
      out.write("          >\r\n");
      out.write("          \r\n");
      out.write("          \r\n");
      out.write("          <input type=\"button\" value=\"답글쓰기\"\r\n");
      out.write("          onclick=\"location.href='reWriteForm.jsp?num=");
      out.print(bb.getNum() );
      out.write("&re_ref=");
      out.print(bb.getRe_ref() );
      out.write("&re_lev=");
      out.print(bb.getRe_lev() );
      out.write("&re_seq=");
      out.print(bb.getRe_seq() );
      out.write("';\"\r\n");
      out.write("          >\r\n");
      out.write("          <input type=\"button\" value=\"목록으로\" \r\n");
      out.write("                 onclick=\"location.href='list.jsp?pageNum=");
      out.print(pageNum );
      out.write("';\" >        \r\n");
      out.write("        </td>\r\n");
      out.write("      </tr>\r\n");
      out.write("      \r\n");
      out.write("    \r\n");
      out.write("    </table>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
