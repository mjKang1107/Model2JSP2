/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-04-16 06:31:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class main_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>member/main.jsp</h1>\r\n");
      out.write("\t\r\n");
      out.write("\t");

		//사용자가 로그인을 했을때만 main페이지 확인
		//로그인 안한경우 로그인 페이지로 이동
	
		//세션객체의 정보를 가져와서 확인
		String id = (String) session.getAttribute("id");
					//다운캐스팅해주면됨- 강제 형변환
					//상속관계에서 부모타입으로 형변환하는거 -> 업캐스팅(상속받은거만 사용할수있다-Object라는 포장지로 싸서 안까지는 모른다..)
					//-> 모든 클래스는 Object라는 최상위 부모를 가진다 
					//상속관계에서 자식타입으로 형변환하는거 -> 다운캐스팅(포장지를 열어서 String이라는 자식타입까지 사용가능하다.)
			if(id==null){
				//로그인 x
				System.out.println("[main.jsp] : 아이디없음 -> 로그인페이지 이동");
				response.sendRedirect("loginForm.jsp");
				
			}		
					
	
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t<h2>");
      out.print(id );
      out.write("님 환영합니다~!!</h2>\r\n");
      out.write("\t<input type=\"button\" value=\"로그아웃!\" onclick=\"location.href='logoutForm.jsp';\"> \r\n");
      out.write("\t\r\n");
      out.write("\t<hr>\r\n");
      out.write("\r\n");
      out.write("\t<h3><a href=\"info.jsp\">회원 정보 조회</a></h3>\r\n");
      out.write("\t\r\n");
      out.write("\t<h3><a href=\"updateForm.jsp\">회원 정보 수정</a></h3>\r\n");
      out.write("\t\r\n");
      out.write("\t<h3><a href=\"deleteForm.jsp\">회원 탈퇴(삭제)</a></h3>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- 관리자만 사용가능한 메뉴 생성 -->\r\n");
      out.write("\t");
if(id != null){
		if(id.equals("admin")){
			//참조형데이터 값 비교시 항상 null값을 먼저 비교 후 데이터 비교
			if(id != null && id.equals("admin"))
		
      out.write("\r\n");
      out.write("\t<h3><a href=\"list.jsp\">회원 목록보기</a></h3>\r\n");
      out.write("\t\r\n");
      out.write("\t");

	 }
	}
	
	
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
