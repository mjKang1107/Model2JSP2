웹 프로그래밍.txt

 버퍼링 -> 스트리밍
 버퍼링 : 옛날에는 데이터를 버퍼에다가 넣어 다녔다. 동영상 데이터를 버퍼 크기만큼 인터넷을 통해 계속 전달했음

모든 웹 페이지도 데이터의 입력, 출력으로 구성이 된다.
 
 * 통신 프로토콜 : http, https 사용
 	=> 컴퓨터들 사이에서 데이터를 주고 받을 때 접속하는 방법, 속도, 형식에 대한 약속
 	
 * TCP/IP : 통신 프로토콜의 일종 => 사용하는 방법
 * OSI 7계층
 
 		[com1]											[com2]
 	애플리케이션 계층		<-(가상의 데이터 송수신)>			애플리케이션 계층
 	트랜스포트 계층 (TCP/UDP)							트랜스포트 계층 (TCP/UDP)
 	네트워크 계층(인터넷/IP)	<-	(실제 데이터 				네트워크 계층(인터넷/IP)
 	데이터링크 계층						송수신)	->		데이터링크 계층
 	
 	
 	애플리케이션 계층 : 응용프로그램 계층. 실제 사용되는 인터넷 응용프로그램 (크롬, 카톡, ...)
 	트랜스포트 계층 : 통신 계층. 데이터 전송 시 에러 검출/정정 
 	네트워크 계층 : 데이터를 패킷 단위로 정확한 위치에 전달한다
 	데이터링크 계층 : 랜 카드 제어 및 데이터 통신을 위한 HW 제어
 	
 	
 	
 * 서버 : 정보/서비스를 제공하는 쪽(컴퓨터)
 * 클라이언트 : 정보/서비스를 제공받는 쪽(사용자)
 * IP주소 : 인터넷 환경에서 컴퓨터를 구분하는 번호(ex 전화번호같은 존재)
 		192.168.2.200 => 4자리 숫자 조합으로 생성되어있음. 0~255
   => [localhost = 127.0.0.1] : 자신의 컴퓨터 
 * 호스트 : 컴퓨터 
 * 포트 번호 : 여러개의 응용프로그램을 구분하는 번호 (같은 ip를 구분하는 수단)
 	tomcat : 8080
 	mysql : 3306
 	FTP : 21
 	....
 	=> 프로그램 개발 시 소켓 통신 프로그램 생성 시 ( 5000~ 이상의 포트 번호 사용, 그 이하의 숫자들은
 		많은 상용프로그램들이 사용중이기 때문에 충돌 날 수 있음 )
 		
 * 도메인 주소 : 실제 IP 주소를 대신해서 사용하는 영문자 주소
   => 도메인 주소는 절대 중복x
   
   
 * 서버와 클라이언트는 정적데이터와 동적 데이터를 서로 주고 받는다.  
 * 정적 데이터 : 변화가 없는 정적인 데이터 (이미지, html, javascript 등 ..)
 	=> 웹 서버에서 처리 (아팟치 웹 서버)
 
 * 동적 데이터 : 변화가 있는 동적인 데이터 (DB...)
 	=> WAS(Web Application server)서버에서 처리 (톰캣)



 * JSP 
 
 ASP.NET(닷넷) -C#
 PHP		  -C
 JSP		  -java
 
 * 서블릿 -(Server+Applet)


* 자바빈(JavaBean) (p245~)  필통과 같은 개념... 데이터를 잘 담아서 가지고 다닐수 있는...
- 디자인부분, 비지니스 로직을 분리하기 위한 기술
- 특정한 기능을 지닌 컴포넌트(객체)

	=> 자바빈 설계 규약
	1) 기본패키지 이외의 다른 패키지에 작성해야한다.
	2) 기본생성자가 있어야함.
	3) 멤버변수는 private 접근지정자 사용.
	4) set/get 메서드를 생성해야함. (public)
	
	
	=>
	
	-------------------------------------------------------------------------------
	
	게시판 만들기(CRUD)
	(Create)
	-새글쓰기, 답글, 댓글
	(Read)
	-글 목록, 글 상세페이지
	(Update)
	-글 정보 수정, 답글, 댓글 수정
	(Delete)
	-글 정보 삭제, 답글 , 댓글 삭제
	
	=> 프로젝트 요구사항 파악=> DB 테이블 생성 => 코드 작성
	
   CREATE TABLE `jspdb`.`itwill_board` (
  `num` INT NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `pass` VARCHAR(100) NOT NULL,
  `subject` VARCHAR(500) NOT NULL,
  `content` VARCHAR(2000) NOT NULL,
  `readcount` INT NULL,
  `re_ref` INT NULL,
  `re_lev` INT NULL,
  `re_seq` INT NULL,
  `date` DATE NULL,
  `ip` VARCHAR(45) NULL,
  `file` VARCHAR(100) NULL,
  PRIMARY KEY (`num`));
	
	*예외 : 일반적이지 않은 실행 상태
	*예외 처리
	try ~ catch ~ finally구문
	
	try{
	예외가 발생할수도 있는 코드 작성(할지 안할지 모르는.. 발생가능성이 높은 코드)
	}catch(Exception 객체){
	발생한 예외에 대한 처리 -> 에러코드 출력
	}finally{
	예외여부와 상관없이 반드시 한번 실행되어야 하는 코드 작성
	 => 자원해제
	}
	
	정상코드 : try 시작(전부 실행) -> try 끝 -> finally시작 -> 끝
	문제코드 : try 시작 -> 문제 발생 -> catch()시작 -> finally 시작 -> 끝
	
	
	*커넥션풀(Connection Pool) : 미리 연결정보(connection)을 생성해서
	저장 후 사용(pool) -> 사용 후 반납
	
	*서비스() 1개당 - 1개의 Connection 사용
	*커넥션의 개수를 제한
	*관리객체가 사용 후 자원해제(회수)
	
	1) 웹브라우저에서 요청
	2) 할당될 커넥션 객체가 있는지 확인
	3) 객체가 있는 경우
	 3-1) 커넥션 할당
	 3-2) 커넥션 객체 사용(sql실행)
	 3-3) 커넥션 반납
	 
	4) 객체가 없는 경우 
	 4-1) 커넥션 객체가 반환될때 까지 대기
	 4-2) 임시 커넥션 객체를 생성	
	
	http://commons.apache.org/
	commons-dbcp2-2.8.0-bin.zip
	commons-collections4-4.4-bin.zip
	commons-pool2-2.9.0-bin.zip
	
	=> WEB-INF /lib복사
	
	-META-INF /context.xml 파일 생성
	=> 디비연결에 필요한 정보를 작성
	
		<Resource
		name=" 해당 연결의 이름 "  -바꿈
		auth=" 컨테이너 자원 관리자  : Application/Container"
		type=" javax.sql.DataSource 객체 타입"
		driverClassName=" 드라이버 이름" -바꿈
		username=" 사용자명" -바꿈
		password=" 사용자 비밀번호" -바꿈
		url=" DB접속 URL" -바꿈
		maxWait=" 5000" -> 5초 (1/1000초)
		/>
	
	=>DAO파일에서 디비 연결동작
	
	-사용중인 프로젝트의 정보를 가져오는 객체를 생성
	Context initCTX = new InitialContext();
			
	-저장한 context.xml파일의 정보를 불러오는 메서드 실행
	-디비연결정보를 저장하는 객체에 파일의 정보를 저장		
		
	(객체 2개로 초기화)
	 Context envCTX = (Context) initCTX.lookup("java:comp/env");
	                             +
	 DataSource ds = (DataSource) envCTX.lookup("jdbc/mysqlDB");
	

    (객체 1개로 초기화)	
	DataSource ds =
	(DataSource) initCTX.lookup("java:comp/env/jdbc/mysqlDB");
	                             [    고정         ][    context.xml 파일 이름 속성      ]						
								
								
	- ds 객체를 사용해서 디비 연결							
	conn = ds.getConnection();
	
	---------------------------------------------------------------------------------------------
	게시판 처리 로직
	
	글쓰기 Form (정보입력) -> 글쓰기 Pro (정보처리) <-> DAO <-> DB
							ㅣ
						리스트 페이지 -> 제목클릭 -> DAO-> 본문
							ㅣ ㅣ
	글수정 Form(DB->정보입력) ->ㅣ글수정 Pro	<-> DAO <-> DB					
							ㅣ
	글삭제 Form(정보입력) -> 글삭제 Pro	<-> DAO <-> DB
	
	---------------------------------------------------------------------------------------------
	
	답글
	re_ref : 부모글(원글)에서 달린 답변글을 표기하기 위한 그룹번호
			일반글의 경우 그룹번호(re_ref)와 글번호(num)가 동일
			답글의 경우 그룹번호와 글번호가 다름
	re_lev : 답변글의 들여쓰기 . 일반들은 0 (들여쓰기 없음)
	
	re_seq : 답변글의 순서. 일반글 0 
	
	-----------------------------------------------------------------------------------------------
	num subject 		re_ref re_lev re_seq
	---------------------------------------
	1 	일반글			1		0		0
	2 	일반글			2		0		0
	3	2-1답글			2		1		1
	4 	2-2답글			2		1		2
	5	2-3답글			2		1		3
	6	 2-3-1답글		2		2		4
	7	 2-2-1답글		2		2		5
	8	일반글			8		0		0
	9	 1-1답글			1		1		1
	10	  2-2-1-1답글		2		3		6
	
	
	---------------------------------------------
	파일 업로드 / 다운로드 p305~
	http://servlets.com/
	COS File Upload Library -> 파일받기(cos-20.08) -> 압출풀고 lib(cos.jar)복사 ->WEB-INF-lib에 붙여넣기 
	
	*파일은 내컴퓨터(서버 컴퓨터)의 HDD에 저장
	
	(가상경로-외부에서 접근가능한 폴더)
	D:\workspace_jsp2\StudyJSP2\WebContent\upload
	
	(실제경로-외부에선 접근불가능한 폴더)
	D:\workspace_jsp2\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\StudyJSP2\upload
	
	
	https://developer.mozilla.org/
	
	MultipartRequest multi = new MultipartRequest(
			request, => jsp내장객체(파라미터)
			path, => 실제 파일이 저장될 위치
			maxSize, => 파일의 크기
			"UTF-8", => 파일업로드시 인코딩 방식
			new DefaultFileRenamePolicy() => 파일이름 중복처리 객체
			);		
	
	
	
	*절대 경로
	- 파일, 웹페이지가 가지고 잇는 고유한 경로.
	=> 해당주소(경로)를 알면 바로 코드/파일 실행가능
	- 절대경로는 시작점에 "/" (root)
	- JSP(Dynamic Web Project) => WebContent폴더가 시작점(model1 구조)
	- JSP(Tomcat Project) => 프로젝트 폴더명 시작점(model2 구조)
	  
	*상대 경로
	- 파일이 위치한 폴더를 기준으로 시작점을 지정 후 파일을 찾아가는 경로 
	- / : 최상위 폴더
	- ./ : 현재폴더 (./생략가능)
	- ../ : 상위 폴더
	
	
	
	
	
	
	
	
	


