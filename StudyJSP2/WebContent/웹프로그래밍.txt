웹 프로그래밍.txt

 버퍼링 -> 스트리밍
 버퍼링 : 옛날에는 데이터를 버퍼에다가 넣어 다녔다. 동영상 데이터를 버퍼 크기만큼 인터넷을 통해 계속 전달했음

모든 웹 페이지도 데이터의 입력, 출력으로 구성이 된다.
 
 * 통신 프로토콜 : http, https 사용
 	=> 컴퓨터들 사이에서 데이터를 주고 받을 때 접속하는 방법, 속도, 형식에 대한 약속
 	
 * TCP/IP : 통신 프로토콜의 일종 => 사용하는 방법
 * OSI 7계층
 
 		[com1]											[com2]
 	애플리케이션 계층		<-(가상의 데이터 송수신)>			애플리케이션 계층
 	트랜스포트 계층 (TCP/UDP)							트랜스포트 계층 (TCP/UDP)
 	네트워크 계층(인터넷/IP)	<-	(실제 데이터 				네트워크 계층(인터넷/IP)
 	데이터링크 계층						송수신)	->		데이터링크 계층
 	
 	
 	애플리케이션 계층 : 응용프로그램 계층. 실제 사용되는 인터넷 응용프로그램 (크롬, 카톡, ...)
 	트랜스포트 계층 : 통신 계층. 데이터 전송 시 에러 검출/정정 
 	네트워크 계층 : 데이터를 패킷 단위로 정확한 위치에 전달한다
 	데이터링크 계층 : 랜 카드 제어 및 데이터 통신을 위한 HW 제어
 	
 	
 	
 * 서버 : 정보/서비스를 제공하는 쪽(컴퓨터)
 * 클라이언트 : 정보/서비스를 제공받는 쪽(사용자)
 * IP주소 : 인터넷 환경에서 컴퓨터를 구분하는 번호(ex 전화번호같은 존재)
 		192.168.2.200 => 4자리 숫자 조합으로 생성되어있음. 0~255
   => [localhost = 127.0.0.1] : 자신의 컴퓨터 
 * 호스트 : 컴퓨터 
 * 포트 번호 : 여러개의 응용프로그램을 구분하는 번호 (같은 ip를 구분하는 수단)
 	tomcat : 8080
 	mysql : 3306
 	FTP : 21
 	....
 	=> 프로그램 개발 시 소켓 통신 프로그램 생성 시 ( 5000~ 이상의 포트 번호 사용, 그 이하의 숫자들은
 		많은 상용프로그램들이 사용중이기 때문에 충돌 날 수 있음 )
 		
 * 도메인 주소 : 실제 IP 주소를 대신해서 사용하는 영문자 주소
   => 도메인 주소는 절대 중복x
   
   
 * 서버와 클라이언트는 정적데이터와 동적 데이터를 서로 주고 받는다.  
 * 정적 데이터 : 변화가 없는 정적인 데이터 (이미지, html, javascript 등 ..)
 	=> 웹 서버에서 처리 (아팟치 웹 서버)
 
 * 동적 데이터 : 변화가 있는 동적인 데이터 (DB...)
 	=> WAS(Web Application server)서버에서 처리 (톰캣)



 * JSP 
 
 ASP.NET(닷넷) -C#
 PHP		  -C
 JSP		  -java
 
 * 서블릿 -(Server+Applet)


* 자바빈(JavaBean) (p245~)  필통과 같은 개념... 데이터를 잘 담아서 가지고 다닐수 있는...
- 디자인부분, 비지니스 로직을 분리하기 위한 기술
- 특정한 기능을 지닌 컴포넌트(객체)

	=> 자바빈 설계 규약
	1) 기본패키지 이외의 다른 패키지에 작성해야한다.
	2) 기본생성자가 있어야함.
	3) 멤버변수는 private 접근지정자 사용.
	4) set/get 메서드를 생성해야함. (public)
	
	
	=>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


